package hse.diploma.cybersecplatform.mock

import hse.diploma.cybersecplatform.domain.model.Task
import hse.diploma.cybersecplatform.ui.model.Difficulty
import hse.diploma.cybersecplatform.ui.model.VulnerabilityType

val mockTasks =
    listOf(
        Task(
            id = 1,
            courseId = 1,
            title = "Отраженная XSS атака",
            description = "Отраженная XSS атака с использованием параметров URL",
            content = "Содержание задания...",
            solution = "Решение задания...",
            vulnerabilityType = VulnerabilityType.XSS,
            number = 1,
            difficulty = Difficulty.EASY,
            type = "XSS",
            points = 10,
            isCompleted = false,
        ),
        Task(
            id = 2,
            courseId = 1,
            title = "Сохраненная XSS атака",
            description = "Сохраненная XSS атака через форму комментариев",
            content = "Содержание задания...",
            solution = "Решение задания...",
            vulnerabilityType = VulnerabilityType.XSS,
            number = 2,
            difficulty = Difficulty.MEDIUM,
            type = "XSS",
            points = 20,
            isCompleted = false,
        ),
        Task(
            id = 3,
            courseId = 1,
            title = "DOM-based XSS",
            description = "DOM-based XSS с динамическим обновлением страницы",
            content = "Содержание задания...",
            solution = "Решение задания...",
            vulnerabilityType = VulnerabilityType.XSS,
            number = 3,
            difficulty = Difficulty.HARD,
            type = "XSS",
            points = 30,
            isCompleted = false,
        ),
        Task(
            id = 4,
            courseId = 2,
            title = "Basic SQL Injection",
            description = "Basic SQL Injection через поле ввода логина",
            content = "Содержание задания...",
            solution = "Решение задания...",
            vulnerabilityType = VulnerabilityType.SQL,
            number = 1,
            difficulty = Difficulty.EASY,
            type = "SQL_INJECTION",
            points = 10,
            isCompleted = false,
        ),
        Task(
            id = 5,
            courseId = 2,
            title = "Blind SQL Injection",
            description = "Blind SQL Injection через URL параметр",
            content = "Содержание задания...",
            solution = "Решение задания...",
            vulnerabilityType = VulnerabilityType.SQL,
            number = 2,
            difficulty = Difficulty.MEDIUM,
            type = "SQL_INJECTION",
            points = 20,
            isCompleted = false,
        ),
        Task(
            id = 6,
            courseId = 3,
            title = "Simple CSRF",
            description = "CSRF на странице изменения пароля",
            content = "Содержание задания...",
            solution = "Решение задания...",
            vulnerabilityType = VulnerabilityType.CSRF,
            number = 1,
            difficulty = Difficulty.EASY,
            type = "CSRF",
            points = 10,
            isCompleted = false,
        ),
        Task(
            id = 7,
            courseId = 4,
            title = "Сохраненная XSS атака",
            description = "Сохраненная XSS атака через форму комментариев",
            content = "Содержание задания...",
            solution = "Решение задания...",
            vulnerabilityType = VulnerabilityType.XSS,
            number = 1,
            difficulty = Difficulty.MEDIUM,
            type = "XSS",
            points = 50,
            isCompleted = true,
        ),
        Task(
            id = 8,
            courseId = 4,
            title = "DOM-based XSS",
            description = "DOM-based XSS с динамическим обновлением страницы",
            content = "Содержание задания...",
            solution = "Решение задания...",
            vulnerabilityType = VulnerabilityType.XSS,
            number = 2,
            difficulty = Difficulty.HARD,
            type = "XSS",
            points = 50,
            isCompleted = true,
        ),
    )

val mockCompletedTasks = mockTasks.map { it.copy(isCompleted = true) }
