basePath: /api
definitions:
  handlers.Enable2FARequest:
    properties:
      otp:
        type: string
    required:
    - otp
    type: object
  handlers.Enable2FAResponse:
    properties:
      status:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  handlers.LoginResponse:
    properties:
      email:
        type: string
      token:
        type: string
      userId:
        type: integer
      username:
        type: string
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      fullName:
        example: New User
        type: string
      password:
        example: newpassword123
        type: string
      username:
        example: newuser
        type: string
    required:
    - email
    - fullName
    - password
    - username
    type: object
  handlers.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  handlers.TempTokenResponse:
    properties:
      message:
        type: string
      tempToken:
        type: string
    type: object
  handlers.VerifyOTPRequest:
    properties:
      otp:
        type: string
      tempToken:
        type: string
    required:
    - otp
    - tempToken
    type: object
  models.Course:
    properties:
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  models.UserProgress:
    properties:
      completed:
        additionalProperties:
          type: boolean
        type: object
      last_activity:
        type: string
      user_id:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for Learning Management System
  title: LMS API
  version: "1.0"
paths:
  /account/2fa/enable:
    post:
      consumes:
      - application/json
      description: Включает двухфакторную аутентификацию для пользователя после проверки
        OTP кода
      parameters:
      - description: OTP данные для верификации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.Enable2FARequest'
      produces:
      - application/json
      responses:
        "200":
          description: 2FA успешно включена
          schema:
            $ref: '#/definitions/handlers.Enable2FAResponse'
        "400":
          description: Неверный запрос или OTP код
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Неавторизованный доступ
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Enable 2FA
      tags:
      - Auth
  /courses:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Course'
            type: array
      summary: Get all courses
  /courses/{id}:
    get:
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Course'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get course by ID
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent to registered email
          schema:
            $ref: '#/definitions/handlers.TempTokenResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: System error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Login
      tags:
      - Auth
  /progress/{user_id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserProgress'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get user progress
  /progress/{user_id}/assignments/{assignment_id}/complete:
    put:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Assignment ID
        in: path
        name: assignment_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Complete assignment
  /register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register new user
      tags:
      - Authentication
  /verify-otp:
    post:
      consumes:
      - application/json
      parameters:
      - description: OTP data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Invalid token or OTP
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: System error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Verify OTP
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
